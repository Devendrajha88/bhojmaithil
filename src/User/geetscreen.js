import React, { useState } from 'react';
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  StatusBar,
  ScrollView
} from 'react-native';
import { Picker } from '@react-native-picker/picker';

export default function App() {
  const [query, setQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [result, setResult] = useState('');

const data = {
  // üö© ‡§Ü‡§∞‡§§‡•Ä
  "‡§ó‡§£‡•á‡§∂ ‡§Ü‡§∞‡§§‡•Ä": `üìå ‡§∂‡•ç‡§∞‡•Ä ‡§ó‡§£‡•á‡§∂ ‡§Ü‡§∞‡§§‡•Ä\n
ü™î ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂, ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂, ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂ ‡§¶‡•á‡§µ‡§æ  
‡§Æ‡§æ‡§§‡§æ ‡§ú‡§æ‡§ï‡•Ä ‡§™‡§æ‡§∞‡•ç‡§µ‡§§‡•Ä, ‡§™‡§ø‡§§‡§æ ‡§Æ‡§π‡§æ‡§¶‡•á‡§µ‡§æ ‡••  

‡§è‡§ï ‡§¶‡§Ç‡§§ ‡§¶‡§Ø‡§æ‡§µ‡§Ç‡§§, ‡§ö‡§æ‡§∞ ‡§≠‡•Å‡§ú‡§æ ‡§ß‡§æ‡§∞‡•Ä  
‡§Æ‡§æ‡§•‡•á ‡§∏‡§ø‡§Ç‡§¶‡•Ç‡§∞ ‡§∏‡•ã‡§π‡•á, ‡§Æ‡•Ç‡§∏‡•á ‡§ï‡•Ä ‡§∏‡§µ‡§æ‡§∞‡•Ä ‡••  
‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂, ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂, ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂ ‡§¶‡•á‡§µ‡§æ  
‡§Æ‡§æ‡§§‡§æ ‡§ú‡§æ‡§ï‡•Ä ‡§™‡§æ‡§∞‡•ç‡§µ‡§§‡•Ä, ‡§™‡§ø‡§§‡§æ ‡§Æ‡§π‡§æ‡§¶‡•á‡§µ‡§æ ‡••  

‡§™‡§æ‡§® ‡§ö‡§¢‡§º‡•á, ‡§´‡§≤ ‡§ö‡§¢‡§º‡•á, ‡§î‡§∞ ‡§ö‡§¢‡§º‡•á ‡§Æ‡•á‡§µ‡§æ  
‡§≤‡§°‡•ç‡§°‡•Å‡§Ö‡§® ‡§ï‡§æ ‡§≠‡•ã‡§ó ‡§≤‡§ó‡•á, ‡§∏‡§Ç‡§§ ‡§ï‡§∞‡•á‡§Ç ‡§∏‡•á‡§µ‡§æ ‡••  
‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂, ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂, ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂ ‡§¶‡•á‡§µ‡§æ  
‡§Æ‡§æ‡§§‡§æ ‡§ú‡§æ‡§ï‡•Ä ‡§™‡§æ‡§∞‡•ç‡§µ‡§§‡•Ä, ‡§™‡§ø‡§§‡§æ ‡§Æ‡§π‡§æ‡§¶‡•á‡§µ‡§æ ‡••  

‡§Ö‡§Ç‡§ß‡§® ‡§ï‡•ã ‡§Ü‡§Ç‡§ñ ‡§¶‡•á‡§§, ‡§ï‡•ã‡§¢‡§º‡§ø‡§® ‡§ï‡•ã ‡§ï‡§æ‡§Ø‡§æ  
‡§¨‡§æ‡§Ç‡§ù‡§® ‡§ï‡•ã ‡§™‡•Å‡§§‡•ç‡§∞ ‡§¶‡•á‡§§, ‡§®‡§ø‡§∞‡•ç‡§ß‡§® ‡§ï‡•ã ‡§Æ‡§æ‡§Ø‡§æ ‡••  
‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂, ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂, ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂ ‡§¶‡•á‡§µ‡§æ  
‡§Æ‡§æ‡§§‡§æ ‡§ú‡§æ‡§ï‡•Ä ‡§™‡§æ‡§∞‡•ç‡§µ‡§§‡•Ä, ‡§™‡§ø‡§§‡§æ ‡§Æ‡§π‡§æ‡§¶‡•á‡§µ‡§æ ‡••  

'‡§∏‡•Ç‡§∞' ‡§∂‡•ç‡§Ø‡§æ‡§Æ ‡§∂‡§∞‡§£ ‡§Ü‡§è, ‡§∏‡§´‡§≤ ‡§ï‡•Ä‡§ú‡•á ‡§∏‡•á‡§µ‡§æ  
‡§Æ‡§æ‡§§‡§æ ‡§ú‡§æ‡§ï‡•Ä ‡§™‡§æ‡§∞‡•ç‡§µ‡§§‡•Ä, ‡§™‡§ø‡§§‡§æ ‡§Æ‡§π‡§æ‡§¶‡•á‡§µ‡§æ ‡••  
‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂, ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂, ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂ ‡§¶‡•á‡§µ‡§æ  
‡§Æ‡§æ‡§§‡§æ ‡§ú‡§æ‡§ï‡•Ä ‡§™‡§æ‡§∞‡•ç‡§µ‡§§‡•Ä, ‡§™‡§ø‡§§‡§æ ‡§Æ‡§π‡§æ‡§¶‡•á‡§µ‡§æ ‡••  

‡§¶‡•Ä‡§®‡§® ‡§ï‡•Ä ‡§≤‡§æ‡§ú ‡§∞‡§ñ‡•ã, ‡§∂‡§Ç‡§≠‡•Å ‡§∏‡•Å‡§§‡§ï‡§æ‡§∞‡•Ä  
‡§ï‡§æ‡§Æ‡§®‡§æ ‡§ï‡•ã ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ï‡§∞‡•ã, ‡§ú‡§æ‡§ä‡§Ç ‡§¨‡§≤‡§ø‡§π‡§æ‡§∞‡•Ä ‡••  
‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂, ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂, ‡§ú‡§Ø ‡§ó‡§£‡•á‡§∂ ‡§¶‡•á‡§µ‡§æ  
‡§Æ‡§æ‡§§‡§æ ‡§ú‡§æ‡§ï‡•Ä ‡§™‡§æ‡§∞‡•ç‡§µ‡§§‡•Ä, ‡§™‡§ø‡§§‡§æ ‡§Æ‡§π‡§æ‡§¶‡•á‡§µ‡§æ ‡••`,

  "‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§Ü‡§∞‡§§‡•Ä": `üìå ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§Æ‡§æ‡§§‡§æ ‡§ï‡•Ä ‡§Ü‡§∞‡§§‡•Ä\n
ü™î ‡•ê ‡§ú‡§Ø ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§Æ‡§æ‡§§‡§æ, ‡§Æ‡•à‡§Ø‡§æ ‡§ú‡§Ø ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§Æ‡§æ‡§§‡§æ  
‡§§‡•Å‡§Æ‡§ï‡•ã ‡§®‡§ø‡§∂‡§¶‡§ø‡§® ‡§∏‡•á‡§µ‡§§, ‡§π‡§∞ ‡§µ‡§ø‡§∑‡•ç‡§£‡•Å ‡§µ‡§ø‡§ß‡§æ‡§§‡§æ ‡••  

‡§â‡§Æ‡§æ, ‡§∞‡§Æ‡§æ, ‡§¨‡•ç‡§∞‡§π‡•ç‡§Æ‡§æ‡§£‡•Ä, ‡§§‡•Å‡§Æ ‡§π‡•Ä ‡§ú‡§ó-‡§Æ‡§æ‡§§‡§æ  
‡§∏‡•Ç‡§∞‡•ç‡§Ø-‡§ö‡§®‡•ç‡§¶‡•ç‡§∞‡§Æ‡§æ ‡§ß‡•ç‡§Ø‡§æ‡§µ‡§§, ‡§®‡§æ‡§∞‡§¶ ‡§ã‡§∑‡§ø ‡§ó‡§æ‡§§‡§æ ‡••  
‡•ê ‡§ú‡§Ø ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§Æ‡§æ‡§§‡§æ, ‡§Æ‡•à‡§Ø‡§æ ‡§ú‡§Ø ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§Æ‡§æ‡§§‡§æ  
‡§§‡•Å‡§Æ‡§ï‡•ã ‡§®‡§ø‡§∂‡§¶‡§ø‡§® ‡§∏‡•á‡§µ‡§§, ‡§π‡§∞ ‡§µ‡§ø‡§∑‡•ç‡§£‡•Å ‡§µ‡§ø‡§ß‡§æ‡§§‡§æ ‡••  

‡§¶‡•Å‡§∞‡•ç‡§ó‡§æ ‡§∞‡•Ç‡§™ ‡§®‡§ø‡§∞‡§Ç‡§ú‡§®, ‡§∏‡•Å‡§ñ-‡§∏‡§Æ‡•ç‡§™‡§§‡•ç‡§§‡§ø ‡§¶‡§æ‡§§‡§æ  
‡§ú‡•ã ‡§ï‡•ã‡§à ‡§§‡•Å‡§Æ‡§ï‡•ã ‡§ß‡•ç‡§Ø‡§æ‡§µ‡§§, ‡§ã‡§¶‡•ç‡§ß‡§ø-‡§∏‡§ø‡§¶‡•ç‡§ß‡§ø ‡§™‡§æ‡§§‡§æ ‡••  
‡•ê ‡§ú‡§Ø ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§Æ‡§æ‡§§‡§æ, ‡§Æ‡•à‡§Ø‡§æ ‡§ú‡§Ø ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§Æ‡§æ‡§§‡§æ  
‡§§‡•Å‡§Æ‡§ï‡•ã ‡§®‡§ø‡§∂‡§¶‡§ø‡§® ‡§∏‡•á‡§µ‡§§, ‡§π‡§∞ ‡§µ‡§ø‡§∑‡•ç‡§£‡•Å ‡§µ‡§ø‡§ß‡§æ‡§§‡§æ ‡••  

‡§§‡•Å‡§Æ ‡§™‡§æ‡§§‡§æ‡§≤-‡§®‡§ø‡§µ‡§æ‡§∏‡§ø‡§®‡•Ä, ‡§§‡•Å‡§Æ ‡§π‡•Ä ‡§∂‡•Å‡§≠-‡§¶‡§æ‡§§‡§æ  
‡§ï‡§∞‡•ç‡§Æ-‡§™‡•ç‡§∞‡§≠‡§æ‡§µ-‡§™‡•ç‡§∞‡§ï‡§æ‡§∂‡§ø‡§®‡•Ä, ‡§≠‡§µ-‡§≠‡§Ø-‡§π‡§∞‡§§‡§æ ‡••  
‡•ê ‡§ú‡§Ø ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§Æ‡§æ‡§§‡§æ, ‡§Æ‡•à‡§Ø‡§æ ‡§ú‡§Ø ‡§≤‡§ï‡•ç‡§∑‡•ç‡§Æ‡•Ä ‡§Æ‡§æ‡§§‡§æ  
‡§§‡•Å‡§Æ‡§ï‡•ã ‡§®‡§ø‡§∂‡§¶‡§ø‡§® ‡§∏‡•á‡§µ‡§§, ‡§π‡§∞ ‡§µ‡§ø‡§∑‡•ç‡§£‡•Å ‡§µ‡§ø‡§ß‡§æ‡§§‡§æ ‡••`
};


  const handleSearch = () => {
    const matched = data[query];
    if (matched) {
      setResult(matched);
    } else {
      setResult('üôè ‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç! ‡§Ø‡§π ‡§ó‡•Ä‡§§/‡§Æ‡§Ç‡§§‡•ç‡§∞ ‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§');
    }
  };

  return (
    <View style={styles.container}>
      <StatusBar hidden={true} />

      <Text style={styles.heading}>üîç ‡§ó‡•Ä‡§§ / ‡§Æ‡§Ç‡§§‡•ç‡§∞ ‡§ñ‡•ã‡§ú‡•á‡§Ç</Text>

      <TextInput
        style={styles.input}
        placeholder='e.g. "‡§ó‡§£‡•á‡§∂ ‡§Ü‡§∞‡§§‡•Ä", "‡§µ‡§ø‡§µ‡§æ‡§π ‡§ó‡•Ä‡§§"'
        placeholderTextColor="#777"
        value={query}
        onChangeText={setQuery}
      />

      <TouchableOpacity style={styles.button} onPress={handleSearch}>
        <Text style={styles.buttonText}>Search</Text>
      </TouchableOpacity>

      <View style={styles.pickerBox}>
        <Picker
          selectedValue={selectedCategory}
          onValueChange={(itemValue) => setSelectedCategory(itemValue)}
        >
          <Picker.Item label="üß© Category Filter" value="" />
          <Picker.Item label="üö© ‡§Ü‡§∞‡§§‡•Ä" value="‡§Ü‡§∞‡§§‡•Ä" />
          <Picker.Item label="üìø ‡§Æ‡§Ç‡§§‡•ç‡§∞" value="‡§Æ‡§Ç‡§§‡•ç‡§∞" />
          <Picker.Item label="üéµ ‡§µ‡§ø‡§µ‡§æ‡§π ‡§ó‡•Ä‡§§" value="‡§µ‡§ø‡§µ‡§æ‡§π ‡§ó‡•Ä‡§§" />
          <Picker.Item label="üßíüèª ‡§â‡§™‡§®‡§Ø‡§® ‡§ó‡•Ä‡§§" value="‡§â‡§™‡§®‡§Ø‡§® ‡§ó‡•Ä‡§§" />
          <Picker.Item label="üôè ‡§™‡§ø‡§Ç‡§°‡§¶‡§æ‡§® ‡§Æ‡§Ç‡§§‡•ç‡§∞" value="‡§™‡§ø‡§Ç‡§°‡§¶‡§æ‡§® ‡§Æ‡§Ç‡§§‡•ç‡§∞" />
          <Picker.Item label="‚ö± ‡§∂‡•ç‡§∞‡§æ‡§¶‡•ç‡§ß ‡§Æ‡§Ç‡§§‡•ç‡§∞" value="‡§∂‡•ç‡§∞‡§æ‡§¶‡•ç‡§ß ‡§Æ‡§Ç‡§§‡•ç‡§∞" />
          <Picker.Item label="ü™î ‡§™‡§∞‡•ç‡§µ ‡§ó‡•Ä‡§§" value="‡§™‡§∞‡•ç‡§µ ‡§ó‡•Ä‡§§" />
        </Picker>
      </View>

      <ScrollView
        style={styles.resultBox}
        maximumZoomScale={3}
        minimumZoomScale={1}
      >
        <Text style={styles.resultText}>{result}</Text>
      </ScrollView>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff8ef',
    padding: 20,
    paddingTop: 50,
  },
  heading: {
    fontSize: 22,
    fontWeight: 'bold',
    marginBottom: 15,
    textAlign: 'center',
    color: '#6a1b1a'
  },
  input: {
    borderWidth: 1,
    borderColor: '#aaa',
    borderRadius: 10,
    padding: 10,
    fontSize: 16,
    backgroundColor: '#fff',
    marginBottom: 10
  },
  button: {
    backgroundColor: '#ff6f00',
    padding: 12,
    borderRadius: 10,
    alignItems: 'center',
    marginBottom: 10
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: '600'
  },
  pickerBox: {
    borderWidth: 1,
    borderColor: '#aaa',
    borderRadius: 10,
    overflow: 'hidden',
    marginBottom: 20
  },
  resultBox: {
    flex: 1,
    backgroundColor: '#fffdf8',
    borderRadius: 10,
    padding: 15,
    borderWidth: 1,
    borderColor: '#ddd',
  },
  resultText: {
    fontSize: 18,
    color: '#333',
    lineHeight: 30
  }
});